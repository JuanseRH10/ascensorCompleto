// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/29/2025 14:16:27"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    alarmas
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module alarmas_vlg_sample_tst(
	cantPer,
	cuentaAscensor,
	sensorEnergia,
	sampler_tx
);
input [3:0] cantPer;
input [5:0] cuentaAscensor;
input  sensorEnergia;
output sampler_tx;

reg sample;
time current_time;
always @(cantPer or cuentaAscensor or sensorEnergia)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module alarmas_vlg_check_tst (
	abrirCerrar,
	abrirCerrarSon,
	anomaliaEn,
	anomaliaEnSon,
	luz,
	masde10,
	sampler_rx
);
input  abrirCerrar;
input  abrirCerrarSon;
input  anomaliaEn;
input  anomaliaEnSon;
input  luz;
input  masde10;
input sampler_rx;

reg  abrirCerrar_expected;
reg  abrirCerrarSon_expected;
reg  anomaliaEn_expected;
reg  anomaliaEnSon_expected;
reg  luz_expected;
reg  masde10_expected;

reg  abrirCerrar_prev;
reg  abrirCerrarSon_prev;
reg  anomaliaEn_prev;
reg  anomaliaEnSon_prev;
reg  luz_prev;
reg  masde10_prev;

reg  abrirCerrar_expected_prev;
reg  abrirCerrarSon_expected_prev;
reg  anomaliaEn_expected_prev;
reg  anomaliaEnSon_expected_prev;
reg  luz_expected_prev;
reg  masde10_expected_prev;

reg  last_abrirCerrar_exp;
reg  last_abrirCerrarSon_exp;
reg  last_anomaliaEn_exp;
reg  last_anomaliaEnSon_exp;
reg  last_luz_exp;
reg  last_masde10_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	abrirCerrar_prev = abrirCerrar;
	abrirCerrarSon_prev = abrirCerrarSon;
	anomaliaEn_prev = anomaliaEn;
	anomaliaEnSon_prev = anomaliaEnSon;
	luz_prev = luz;
	masde10_prev = masde10;
end

// update expected /o prevs

always @(trigger)
begin
	abrirCerrar_expected_prev = abrirCerrar_expected;
	abrirCerrarSon_expected_prev = abrirCerrarSon_expected;
	anomaliaEn_expected_prev = anomaliaEn_expected;
	anomaliaEnSon_expected_prev = anomaliaEnSon_expected;
	luz_expected_prev = luz_expected;
	masde10_expected_prev = masde10_expected;
end



// expected anomaliaEn
initial
begin
	anomaliaEn_expected = 1'bX;
end 

// expected anomaliaEnSon
initial
begin
	anomaliaEnSon_expected = 1'bX;
end 

// expected luz
initial
begin
	luz_expected = 1'bX;
end 

// expected masde10
initial
begin
	masde10_expected = 1'bX;
end 

// expected abrirCerrar
initial
begin
	abrirCerrar_expected = 1'bX;
end 

// expected abrirCerrarSon
initial
begin
	abrirCerrarSon_expected = 1'bX;
end 
// generate trigger
always @(abrirCerrar_expected or abrirCerrar or abrirCerrarSon_expected or abrirCerrarSon or anomaliaEn_expected or anomaliaEn or anomaliaEnSon_expected or anomaliaEnSon or luz_expected or luz or masde10_expected or masde10)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected abrirCerrar = %b | expected abrirCerrarSon = %b | expected anomaliaEn = %b | expected anomaliaEnSon = %b | expected luz = %b | expected masde10 = %b | ",abrirCerrar_expected_prev,abrirCerrarSon_expected_prev,anomaliaEn_expected_prev,anomaliaEnSon_expected_prev,luz_expected_prev,masde10_expected_prev);
	$display("| real abrirCerrar = %b | real abrirCerrarSon = %b | real anomaliaEn = %b | real anomaliaEnSon = %b | real luz = %b | real masde10 = %b | ",abrirCerrar_prev,abrirCerrarSon_prev,anomaliaEn_prev,anomaliaEnSon_prev,luz_prev,masde10_prev);
`endif
	if (
		( abrirCerrar_expected_prev !== 1'bx ) && ( abrirCerrar_prev !== abrirCerrar_expected_prev )
		&& ((abrirCerrar_expected_prev !== last_abrirCerrar_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abrirCerrar :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abrirCerrar_expected_prev);
		$display ("     Real value = %b", abrirCerrar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_abrirCerrar_exp = abrirCerrar_expected_prev;
	end
	if (
		( abrirCerrarSon_expected_prev !== 1'bx ) && ( abrirCerrarSon_prev !== abrirCerrarSon_expected_prev )
		&& ((abrirCerrarSon_expected_prev !== last_abrirCerrarSon_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port abrirCerrarSon :: @time = %t",  $realtime);
		$display ("     Expected value = %b", abrirCerrarSon_expected_prev);
		$display ("     Real value = %b", abrirCerrarSon_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_abrirCerrarSon_exp = abrirCerrarSon_expected_prev;
	end
	if (
		( anomaliaEn_expected_prev !== 1'bx ) && ( anomaliaEn_prev !== anomaliaEn_expected_prev )
		&& ((anomaliaEn_expected_prev !== last_anomaliaEn_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port anomaliaEn :: @time = %t",  $realtime);
		$display ("     Expected value = %b", anomaliaEn_expected_prev);
		$display ("     Real value = %b", anomaliaEn_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_anomaliaEn_exp = anomaliaEn_expected_prev;
	end
	if (
		( anomaliaEnSon_expected_prev !== 1'bx ) && ( anomaliaEnSon_prev !== anomaliaEnSon_expected_prev )
		&& ((anomaliaEnSon_expected_prev !== last_anomaliaEnSon_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port anomaliaEnSon :: @time = %t",  $realtime);
		$display ("     Expected value = %b", anomaliaEnSon_expected_prev);
		$display ("     Real value = %b", anomaliaEnSon_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_anomaliaEnSon_exp = anomaliaEnSon_expected_prev;
	end
	if (
		( luz_expected_prev !== 1'bx ) && ( luz_prev !== luz_expected_prev )
		&& ((luz_expected_prev !== last_luz_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port luz :: @time = %t",  $realtime);
		$display ("     Expected value = %b", luz_expected_prev);
		$display ("     Real value = %b", luz_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_luz_exp = luz_expected_prev;
	end
	if (
		( masde10_expected_prev !== 1'bx ) && ( masde10_prev !== masde10_expected_prev )
		&& ((masde10_expected_prev !== last_masde10_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port masde10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", masde10_expected_prev);
		$display ("     Real value = %b", masde10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_masde10_exp = masde10_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module alarmas_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] cantPer;
reg [5:0] cuentaAscensor;
reg sensorEnergia;
// wires                                               
wire abrirCerrar;
wire abrirCerrarSon;
wire anomaliaEn;
wire anomaliaEnSon;
wire luz;
wire masde10;

wire sampler;                             

// assign statements (if any)                          
alarmas i1 (
// port map - connection between master ports and signals/registers   
	.abrirCerrar(abrirCerrar),
	.abrirCerrarSon(abrirCerrarSon),
	.anomaliaEn(anomaliaEn),
	.anomaliaEnSon(anomaliaEnSon),
	.cantPer(cantPer),
	.cuentaAscensor(cuentaAscensor),
	.luz(luz),
	.masde10(masde10),
	.sensorEnergia(sensorEnergia)
);

// sensorEnergia
always
begin
	sensorEnergia = 1'b0;
	sensorEnergia = #100000 1'b1;
	#100000;
end 
// cantPer[ 3 ]
initial
begin
	cantPer[3] = 1'b0;
end 
// cantPer[ 2 ]
initial
begin
	cantPer[2] = 1'b0;
end 
// cantPer[ 1 ]
initial
begin
	cantPer[1] = 1'b0;
end 
// cantPer[ 0 ]
initial
begin
	cantPer[0] = 1'b0;
end 
// cuentaAscensor[ 5 ]
initial
begin
	cuentaAscensor[5] = 1'b0;
	cuentaAscensor[5] = #465000 1'b1;
	cuentaAscensor[5] = #480000 1'b0;
end 
// cuentaAscensor[ 4 ]
initial
begin
	cuentaAscensor[4] = 1'b0;
	cuentaAscensor[4] = #225000 1'b1;
	cuentaAscensor[4] = #240000 1'b0;
	cuentaAscensor[4] = #240000 1'b1;
	cuentaAscensor[4] = #240000 1'b0;
end 
// cuentaAscensor[ 3 ]
initial
begin
	cuentaAscensor[3] = 1'b0;
	# 105000;
	repeat(3)
	begin
		cuentaAscensor[3] = 1'b1;
		cuentaAscensor[3] = #120000 1'b0;
		# 120000;
	end
	cuentaAscensor[3] = 1'b1;
	cuentaAscensor[3] = #120000 1'b0;
end 
// cuentaAscensor[ 2 ]
initial
begin
	cuentaAscensor[2] = 1'b0;
	# 45000;
	repeat(7)
	begin
		cuentaAscensor[2] = 1'b1;
		cuentaAscensor[2] = #60000 1'b0;
		# 60000;
	end
	cuentaAscensor[2] = 1'b1;
	cuentaAscensor[2] = #60000 1'b0;
end 
// cuentaAscensor[ 1 ]
initial
begin
	cuentaAscensor[1] = 1'b0;
	# 15000;
	repeat(16)
	begin
		cuentaAscensor[1] = 1'b1;
		cuentaAscensor[1] = #30000 1'b0;
		# 30000;
	end
	cuentaAscensor[1] = 1'b1;
end 
// cuentaAscensor[ 0 ]
initial
begin
	repeat(33)
	begin
		cuentaAscensor[0] = 1'b1;
		cuentaAscensor[0] = #15000 1'b0;
		# 15000;
	end
	cuentaAscensor[0] = 1'b1;
end 

alarmas_vlg_sample_tst tb_sample (
	.cantPer(cantPer),
	.cuentaAscensor(cuentaAscensor),
	.sensorEnergia(sensorEnergia),
	.sampler_tx(sampler)
);

alarmas_vlg_check_tst tb_out(
	.abrirCerrar(abrirCerrar),
	.abrirCerrarSon(abrirCerrarSon),
	.anomaliaEn(anomaliaEn),
	.anomaliaEnSon(anomaliaEnSon),
	.luz(luz),
	.masde10(masde10),
	.sampler_rx(sampler)
);
endmodule

