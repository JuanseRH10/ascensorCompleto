// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2025 23:40:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controlAscensor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controlAscensor_vlg_sample_tst(
	anomalia,
	cambiandoEstado,
	estadoPuerta,
	pet1,
	pet2,
	pisoActual,
	sobreCarga,
	sampler_tx
);
input  anomalia;
input  cambiandoEstado;
input  estadoPuerta;
input [2:0] pet1;
input [2:0] pet2;
input [2:0] pisoActual;
input  sobreCarga;
output sampler_tx;

reg sample;
time current_time;
always @(anomalia or cambiandoEstado or estadoPuerta or pet1 or pet2 or pisoActual or sobreCarga)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controlAscensor_vlg_check_tst (
	bajar,
	quieto,
	subir,
	sampler_rx
);
input  bajar;
input  quieto;
input  subir;
input sampler_rx;

reg  bajar_expected;
reg  quieto_expected;
reg  subir_expected;

reg  bajar_prev;
reg  quieto_prev;
reg  subir_prev;

reg  bajar_expected_prev;
reg  quieto_expected_prev;
reg  subir_expected_prev;

reg  last_bajar_exp;
reg  last_quieto_exp;
reg  last_subir_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	bajar_prev = bajar;
	quieto_prev = quieto;
	subir_prev = subir;
end

// update expected /o prevs

always @(trigger)
begin
	bajar_expected_prev = bajar_expected;
	quieto_expected_prev = quieto_expected;
	subir_expected_prev = subir_expected;
end



// expected subir
initial
begin
	subir_expected = 1'bX;
end 

// expected bajar
initial
begin
	bajar_expected = 1'bX;
end 

// expected quieto
initial
begin
	quieto_expected = 1'bX;
end 
// generate trigger
always @(bajar_expected or bajar or quieto_expected or quieto or subir_expected or subir)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected bajar = %b | expected quieto = %b | expected subir = %b | ",bajar_expected_prev,quieto_expected_prev,subir_expected_prev);
	$display("| real bajar = %b | real quieto = %b | real subir = %b | ",bajar_prev,quieto_prev,subir_prev);
`endif
	if (
		( bajar_expected_prev !== 1'bx ) && ( bajar_prev !== bajar_expected_prev )
		&& ((bajar_expected_prev !== last_bajar_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port bajar :: @time = %t",  $realtime);
		$display ("     Expected value = %b", bajar_expected_prev);
		$display ("     Real value = %b", bajar_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_bajar_exp = bajar_expected_prev;
	end
	if (
		( quieto_expected_prev !== 1'bx ) && ( quieto_prev !== quieto_expected_prev )
		&& ((quieto_expected_prev !== last_quieto_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port quieto :: @time = %t",  $realtime);
		$display ("     Expected value = %b", quieto_expected_prev);
		$display ("     Real value = %b", quieto_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_quieto_exp = quieto_expected_prev;
	end
	if (
		( subir_expected_prev !== 1'bx ) && ( subir_prev !== subir_expected_prev )
		&& ((subir_expected_prev !== last_subir_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port subir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", subir_expected_prev);
		$display ("     Real value = %b", subir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_subir_exp = subir_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controlAscensor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg anomalia;
reg cambiandoEstado;
reg estadoPuerta;
reg [2:0] pet1;
reg [2:0] pet2;
reg [2:0] pisoActual;
reg sobreCarga;
// wires                                               
wire bajar;
wire quieto;
wire subir;

wire sampler;                             

// assign statements (if any)                          
controlAscensor i1 (
// port map - connection between master ports and signals/registers   
	.anomalia(anomalia),
	.bajar(bajar),
	.cambiandoEstado(cambiandoEstado),
	.estadoPuerta(estadoPuerta),
	.pet1(pet1),
	.pet2(pet2),
	.pisoActual(pisoActual),
	.quieto(quieto),
	.sobreCarga(sobreCarga),
	.subir(subir)
);

// anomalia
initial
begin
	anomalia = 1'b0;
end 

// cambiandoEstado
initial
begin
	cambiandoEstado = 1'b0;
end 

// estadoPuerta
initial
begin
	estadoPuerta = 1'b0;
end 

// sobreCarga
initial
begin
	sobreCarga = 1'b0;
end 
// pisoActual[ 2 ]
initial
begin
	pisoActual[2] = 1'b0;
end 
// pisoActual[ 1 ]
initial
begin
	pisoActual[1] = 1'b1;
end 
// pisoActual[ 0 ]
initial
begin
	pisoActual[0] = 1'b0;
end 
// pet1[ 2 ]
initial
begin
	pet1[2] = 1'b1;
end 
// pet1[ 1 ]
initial
begin
	pet1[1] = 1'b0;
end 
// pet1[ 0 ]
initial
begin
	pet1[0] = 1'b0;
end 
// pet2[ 2 ]
initial
begin
	pet2[2] = 1'b0;
end 
// pet2[ 1 ]
initial
begin
	pet2[1] = 1'b0;
end 
// pet2[ 0 ]
initial
begin
	pet2[0] = 1'b1;
end 

controlAscensor_vlg_sample_tst tb_sample (
	.anomalia(anomalia),
	.cambiandoEstado(cambiandoEstado),
	.estadoPuerta(estadoPuerta),
	.pet1(pet1),
	.pet2(pet2),
	.pisoActual(pisoActual),
	.sobreCarga(sobreCarga),
	.sampler_tx(sampler)
);

controlAscensor_vlg_check_tst tb_out(
	.bajar(bajar),
	.quieto(quieto),
	.subir(subir),
	.sampler_rx(sampler)
);
endmodule

