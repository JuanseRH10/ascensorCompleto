// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2025 21:03:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    detectorBoton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module detectorBoton_vlg_sample_tst(
	clk,
	PB,
	PD,
	PS,
	reset1,
	reset2,
	sampler_tx
);
input  clk;
input [4:0] PB;
input [4:0] PD;
input [4:0] PS;
input  reset1;
input  reset2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or PB or PD or PS or reset1 or reset2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module detectorBoton_vlg_check_tst (
	pet1,
	pet2,
	sampler_rx
);
input [4:0] pet1;
input [4:0] pet2;
input sampler_rx;

reg [4:0] pet1_expected;
reg [4:0] pet2_expected;

reg [4:0] pet1_prev;
reg [4:0] pet2_prev;

reg [4:0] pet1_expected_prev;
reg [4:0] pet2_expected_prev;

reg [4:0] last_pet1_exp;
reg [4:0] last_pet2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	pet1_prev = pet1;
	pet2_prev = pet2;
end

// update expected /o prevs

always @(trigger)
begin
	pet1_expected_prev = pet1_expected;
	pet2_expected_prev = pet2_expected;
end


// expected pet1[ 4 ]
initial
begin
	pet1_expected[4] = 1'bX;
end 
// expected pet1[ 3 ]
initial
begin
	pet1_expected[3] = 1'bX;
end 
// expected pet1[ 2 ]
initial
begin
	pet1_expected[2] = 1'bX;
end 
// expected pet1[ 1 ]
initial
begin
	pet1_expected[1] = 1'bX;
end 
// expected pet1[ 0 ]
initial
begin
	pet1_expected[0] = 1'bX;
end 
// expected pet2[ 4 ]
initial
begin
	pet2_expected[4] = 1'bX;
end 
// expected pet2[ 3 ]
initial
begin
	pet2_expected[3] = 1'bX;
end 
// expected pet2[ 2 ]
initial
begin
	pet2_expected[2] = 1'bX;
end 
// expected pet2[ 1 ]
initial
begin
	pet2_expected[1] = 1'bX;
end 
// expected pet2[ 0 ]
initial
begin
	pet2_expected[0] = 1'bX;
end 
// generate trigger
always @(pet1_expected or pet1 or pet2_expected or pet2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected pet1 = %b | expected pet2 = %b | ",pet1_expected_prev,pet2_expected_prev);
	$display("| real pet1 = %b | real pet2 = %b | ",pet1_prev,pet2_prev);
`endif
	if (
		( pet1_expected_prev[0] !== 1'bx ) && ( pet1_prev[0] !== pet1_expected_prev[0] )
		&& ((pet1_expected_prev[0] !== last_pet1_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet1_expected_prev);
		$display ("     Real value = %b", pet1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pet1_exp[0] = pet1_expected_prev[0];
	end
	if (
		( pet1_expected_prev[1] !== 1'bx ) && ( pet1_prev[1] !== pet1_expected_prev[1] )
		&& ((pet1_expected_prev[1] !== last_pet1_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet1_expected_prev);
		$display ("     Real value = %b", pet1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pet1_exp[1] = pet1_expected_prev[1];
	end
	if (
		( pet1_expected_prev[2] !== 1'bx ) && ( pet1_prev[2] !== pet1_expected_prev[2] )
		&& ((pet1_expected_prev[2] !== last_pet1_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet1_expected_prev);
		$display ("     Real value = %b", pet1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pet1_exp[2] = pet1_expected_prev[2];
	end
	if (
		( pet1_expected_prev[3] !== 1'bx ) && ( pet1_prev[3] !== pet1_expected_prev[3] )
		&& ((pet1_expected_prev[3] !== last_pet1_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet1_expected_prev);
		$display ("     Real value = %b", pet1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pet1_exp[3] = pet1_expected_prev[3];
	end
	if (
		( pet1_expected_prev[4] !== 1'bx ) && ( pet1_prev[4] !== pet1_expected_prev[4] )
		&& ((pet1_expected_prev[4] !== last_pet1_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet1_expected_prev);
		$display ("     Real value = %b", pet1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_pet1_exp[4] = pet1_expected_prev[4];
	end
	if (
		( pet2_expected_prev[0] !== 1'bx ) && ( pet2_prev[0] !== pet2_expected_prev[0] )
		&& ((pet2_expected_prev[0] !== last_pet2_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet2_expected_prev);
		$display ("     Real value = %b", pet2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pet2_exp[0] = pet2_expected_prev[0];
	end
	if (
		( pet2_expected_prev[1] !== 1'bx ) && ( pet2_prev[1] !== pet2_expected_prev[1] )
		&& ((pet2_expected_prev[1] !== last_pet2_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet2_expected_prev);
		$display ("     Real value = %b", pet2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pet2_exp[1] = pet2_expected_prev[1];
	end
	if (
		( pet2_expected_prev[2] !== 1'bx ) && ( pet2_prev[2] !== pet2_expected_prev[2] )
		&& ((pet2_expected_prev[2] !== last_pet2_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet2_expected_prev);
		$display ("     Real value = %b", pet2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pet2_exp[2] = pet2_expected_prev[2];
	end
	if (
		( pet2_expected_prev[3] !== 1'bx ) && ( pet2_prev[3] !== pet2_expected_prev[3] )
		&& ((pet2_expected_prev[3] !== last_pet2_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet2_expected_prev);
		$display ("     Real value = %b", pet2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pet2_exp[3] = pet2_expected_prev[3];
	end
	if (
		( pet2_expected_prev[4] !== 1'bx ) && ( pet2_prev[4] !== pet2_expected_prev[4] )
		&& ((pet2_expected_prev[4] !== last_pet2_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port pet2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", pet2_expected_prev);
		$display ("     Real value = %b", pet2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_pet2_exp[4] = pet2_expected_prev[4];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module detectorBoton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [4:0] PB;
reg [4:0] PD;
reg [4:0] PS;
reg reset1;
reg reset2;
// wires                                               
wire [4:0] pet1;
wire [4:0] pet2;

wire sampler;                             

// assign statements (if any)                          
detectorBoton i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.PB(PB),
	.PD(PD),
	.pet1(pet1),
	.pet2(pet2),
	.PS(PS),
	.reset1(reset1),
	.reset2(reset2)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// reset1
initial
begin
	reset1 = 1'b0;
end 

// reset2
initial
begin
	reset2 = 1'b0;
end 
// PS[ 4 ]
initial
begin
	PS[4] = 1'b0;
end 
// PS[ 3 ]
initial
begin
	PS[3] = 1'b0;
end 
// PS[ 2 ]
initial
begin
	PS[2] = 1'b0;
end 
// PS[ 1 ]
initial
begin
	PS[1] = 1'b0;
end 
// PS[ 0 ]
initial
begin
	PS[0] = 1'b0;
end 
// PB[ 4 ]
initial
begin
	PB[4] = 1'b0;
end 
// PB[ 3 ]
initial
begin
	PB[3] = 1'b0;
end 
// PB[ 2 ]
initial
begin
	PB[2] = 1'b0;
end 
// PB[ 1 ]
initial
begin
	PB[1] = 1'b0;
end 
// PB[ 0 ]
initial
begin
	PB[0] = 1'b0;
end 
// PD[ 4 ]
initial
begin
	repeat(3)
	begin
		PD[4] = 1'b0;
		PD[4] = #285000 1'b1;
		# 15000;
	end
	PD[4] = 1'b0;
end 
// PD[ 3 ]
initial
begin
	PD[3] = 1'b0;
end 
// PD[ 2 ]
initial
begin
	PD[2] = 1'b0;
end 
// PD[ 1 ]
initial
begin
	PD[1] = 1'b0;
end 
// PD[ 0 ]
initial
begin
	repeat(2)
	begin
		PD[0] = 1'b0;
		PD[0] = #380000 1'b1;
		# 20000;
	end
	PD[0] = 1'b0;
end 

detectorBoton_vlg_sample_tst tb_sample (
	.clk(clk),
	.PB(PB),
	.PD(PD),
	.PS(PS),
	.reset1(reset1),
	.reset2(reset2),
	.sampler_tx(sampler)
);

detectorBoton_vlg_check_tst tb_out(
	.pet1(pet1),
	.pet2(pet2),
	.sampler_rx(sampler)
);
endmodule

